package model

import (
	"strings"
	"time"

	"gorm.io/gorm"
)

type Base struct {
	ID        uint           `gorm:"primarykey" json:"id"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	DeletedAt gorm.DeletedAt `gorm:"index" json:"deleted_at"`
}

type Brand struct {
	Base
	Name string `gorm:"uniqueIndex:idx_brand_name" json:"name"`
}

type Type struct {
	Base
	Name  string `gorm:"-:all" json:"name"` // ignore all, just generated by major-minor
	Major string `gorm:"uniqueIndex:idx_type_major_minor" json:"major"`
	Minor string `gorm:"uniqueIndex:idx_type_major_minor" json:"minor"`
}

const (
	FilamentTypeSep          = "-"
	FilamentTypeDefaultMinor = "基础"
)

func (t *Type) AfterFind(_ *gorm.DB) (err error) {
	t.Name = JoinType(t.Major, t.Minor)
	return nil
}

func (t *Type) BeforeSave(tx *gorm.DB) (err error) {
	return t.beforeChange(tx)
}

func (t *Type) beforeChange(_ *gorm.DB) (err error) {
	if len(t.Name) == 0 {
		t.Name = JoinType(t.Major, t.Minor)
		return nil
	}
	t.Major, t.Minor = ExploreType(t.Name)
	return nil
}

func (t *Type) BeforeCreate(tx *gorm.DB) (err error) {
	return t.beforeChange(tx)
}

func ExploreType(name string) (major, minor string) {
	info := strings.SplitN(name, FilamentTypeSep, 2)
	major = info[0]
	if len(info) < 2 {
		minor = FilamentTypeDefaultMinor
	} else {
		minor = info[1]
	}
	return
}

func JoinType(major, minor string) string {
	return major + FilamentTypeSep + minor
}

type Color struct {
	Base
	Name string `gorm:"uniqueIndex:idx_color_name" json:"name"`
	RGBA string `json:"rgba"`
}

type Filament struct {
	Base
	BrandId  uint  `json:"brand_id"`
	Brand    Brand `gorm:"foreignKey:BrandId" json:"brand"`
	TypeId   uint  `json:"type_id"`
	Type     Type  `gorm:"foreignKey:TypeId" json:"type"`
	ColorId  uint  `json:"color_id"`
	Color    Color `gorm:"foreignKey:ColorId" json:"color"`
	Quantity int   `json:"quantity"`
	Price    int64 `json:"price"`
}

const (
	KindStockIn   = "stock-in"
	KindStockOut  = "stock-out"
	KindStockTake = "stock-take"
)

type Record struct {
	Base
	Kind     string `json:"kind"`
	BrandId  uint   `json:"brand_id"`
	Brand    Brand  `gorm:"foreignKey:BrandId" json:"brand"`
	TypeId   uint   `json:"type_id"`
	Type     Type   `gorm:"foreignKey:TypeId" json:"type"`
	ColorId  uint   `json:"color_id"`
	Color    Color  `gorm:"foreignKey:ColorId" json:"color"`
	Price    int64  `json:"price"`
	Quantity int    `json:"quantity"`
}
